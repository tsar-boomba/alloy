on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload-url: ${{ steps.create.outputs.upload-url }}
    steps:
      - uses: actions/checkout@v3
      - uses: softprops/action-gh-release@v1
        id: create
        with:
          draft: false
          body: '' # TODO actual body
          token: ${{ github.token }}
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}

  upload-library:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            prefix: lib
            extension: so
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            prefix: lib
            extension: so
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            prefix: ''
            extension: dll
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        with:
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Build Library
        run: cargo build --target ${{ matrix.target }} --release --locked -p alloy-runtime
      - name: Prepare Library (tar / zip it)
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip "${{ matrix.prefix }}alloy_runtime-${{ matrix.target }}-${{ github.ref_name }}.${{ matrix.extension }}.zip" \
              target/${{ matrix.target }}/release/${{ matrix.prefix }}alloy_runtime.${{ matrix.extension }}
          else
            tar -czvf ${{ matrix.prefix }}alloy_runtime-${{ matrix.target }}-${{ github.ref_name }}.${{ matrix.extension }}.tar.gz \
              target/${{ matrix.target }}/release/${{ matrix.prefix }}alloy_runtime.${{ matrix.extension }}
          fi
      - name: Add Artifact To Release
        uses: softprops/action-gh-release@v1
        with:
          body: ''
          append_body: true
          token: ${{ github.token }}
          tag_name: ${{ github.ref }}
          files: ${{ matrix.prefix }}alloy_runtime-${{ matrix.target }}-${{ github.ref_name }}.${{ matrix.extension }}*
  
  upload-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            profile: minimal
      - run: rustup target add aarch64-apple-darwin
      - uses: Swatinem/rust-cache@v2
      - name: Build x86 Library
        run: cargo build --release --locked -p alloy-runtime
      - name: Build aarch64 Library
        run: |
          sudo xcode-select -s "/Applications/Xcode_12.3.app"
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
          cargo build --release --locked -p alloy-runtime --target aarch64-apple-darwin
      - name: Prepare Library (tar / zip it)
        shell: bash
        run: |
            tar -czvf liballoy_runtime-x86_64-apple-darwin-${{ github.ref_name }}.dylib.tar.gz \
              target/release/liballoy_runtime.dylib
            tar -czvf liballoy_runtime-aarch64-apple-darwin-${{ github.ref_name }}.dylib.tar.gz \
              target/aarch64-apple-darwin/release/liballoy_runtime.dylib
      - name: Add Artifact To Release
        uses: softprops/action-gh-release@v1
        with:
          body: ''
          append_body: true
          token: ${{ github.token }}
          tag_name: ${{ github.ref }}
          files: liballoy_runtime-*-${{ github.ref_name }}*

